	package com.example.tests;
	
	/*import java.util.ArrayList;
	import java.util.Iterator;
	import java.util.List;
	import java.util.Random;
	import org.testng.annotations.DataProvider;
	*/
	import java.util.Set;

import org.testng.annotations.Test;
	
	public class ContactCreationTest extends TestBase {
	

		/*Random rnd = new Random();
		
		@DataProvider (name = "randomContacts")
		public Iterator<Object[]> generateRandomGroups() {
			List<Object[]> list = new ArrayList<Object[]>();
			for (int i = 0; i < 1 ; i++) {
				GroupObject group = new GroupObject()
				.setGroupName("name"+rnd.nextInt())
				.setGroupHeader("Header"+rnd.nextInt())
				.setGroupFooter("Footer"+rnd.nextInt());
			    list.add(new Object[]{group});
			}
			return list.iterator();
		}
			*/
		
	
	@Test //(dataProvider = "randomContacts")
		
		
	public void testContactWithValidDataCanBeCreated() throws Exception {
		
		ContactObject validContact = new ContactObject()
		.setContactFirstName("ContactLastNameText")
		.setContactLastName("ContactFirstNameText")
		.setContactAddressText("ContactAddressText")
		.setContactHomePhone("1234567890")
		.setContactMobilePhone("1234567890")
		.setContactWork("ContactWorkText")
		.setContactEmail("ContactEmail@Text.com")
		.setContactEmail2("ContactEmail2@Text.com")
		.setContactByEar("1991")
		.setContactAddress2("ContactAddress2Text")
		.setContactPhone2("1234567890")
		.setBdaySelect(7)
		.setBmountSelect(3)
		.setGroupSelect(3);
		
		
	
	Set<ContactObject> oldList = app.getContactHelper().getContacts();
	//Action
	app.getContactHelper().createContact(validContact);
	//Verification
	Set<ContactObject> newList = app.getContactHelper().getContacts();
	app.getVerifyForContacts().verifyContactAdded(oldList, validContact, newList);
	
	}
	
	@Test
	
	
	public void testContactWithEmptyDataCanBeCreated() throws Exception {
		//This test will leave blank text fields. Dropdowns is skipped.
	ContactObject EmptyContact = new ContactObject()
		.setContactFirstName("")
		.setContactLastName("")
		.setContactAddressText("")
		.setContactHomePhone("")
		.setContactMobilePhone("")
		.setContactWork("")
		.setContactEmail("")
		.setContactEmail2("")
		.setContactByEar("")
		.setContactAddress2("")
		.setContactPhone2("");	
	
	
	Set<ContactObject> oldList = app.getContactHelper().getContacts();
	//Action
	app.getContactHelper().createContact(EmptyContact);
	//Verification
	Set<ContactObject> newList = app.getContactHelper().getContacts();
	app.getVerifyForContacts().verifyContactAdded(oldList, EmptyContact, newList);
	
	
	}
	
	@Test
	
	
	public void testContactWithIncorrectDataCantBeCreated() throws Exception {
		//This test will try to create contact with symbols in text fields
	ContactObject IncorrectContact = new ContactObject().setContactFirstName("ContactFirstNameText")
		.setContactLastName("!@#$%^&*()_+-='")
		.setContactAddressText("!@#$%^&*()_+-='")
		.setContactHomePhone("!@#$%^&*()_+-='")
		.setContactMobilePhone("!@#$%^&*()_+-='")
		.setContactWork("!@#$%^&*()_+-='")
		.setContactEmail("!@#$%^&*()_+-='")
		.setContactEmail2("!@#$%^&*()_+-='")
		.setContactByEar("!@#$%^&*()_+-='")
		.setContactAddress2("!@#$%^&*()_+-='")
		.setContactPhone2("!@#$%^&*()_+-='")
		.setBdaySelect(7)
		.setBmountSelect(3)
		.setGroupSelect(3);	
	
	    
	    Set<ContactObject> oldList = app.getContactHelper().getContacts();
		//Action
	    app.getContactHelper().createContact(IncorrectContact);
		//Verification
		Set<ContactObject> newList = app.getContactHelper().getContacts();
		app.getVerifyForContacts().verifyContactNotAdded(oldList, IncorrectContact, newList);
		//Method for verify that group is [[[not created. Just for experiment.
	}
	
	}